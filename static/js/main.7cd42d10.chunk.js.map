{"version":3,"sources":["hooks/store.tsx","components/BirthDateForm/BirthDateForm.tsx","components/PanicMonster/PanicMonster.tsx","helpers/datetime-helpers.ts","components/App/logo.svg","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["usePersistedState","createPersistedState","initialStoreState","storeContext","createContext","undefined","StoreProvider","children","Provider","value","useStore","useContext","state","setState","setBirthDate","birthDate","BirthDateForm","useForm","register","handleSubmit","formState","errors","onSubmit","data","BirthDate","type","defaultValue","PanicMonster","now","Date","className","times","Math","ceil","YEARS","w","date","days","newDate","setDate","getDate","getDateOfMultipleDaysLater","classes","push","age","dob","monthAge","dateAge","at","dobYear","getFullYear","dobMonth","getMonth","dobDate","atYear","atMonth","atDate","yearAge","years","months","calculateAge","title","toDateString","join","onClick","alert","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cd42d10.chunk.js","sourcesContent":["import {\n  createContext,\n  Dispatch,\n  ReactElement,\n  SetStateAction,\n  useContext,\n} from \"react\";\nimport createPersistedState from \"use-persisted-state\";\n\nconst usePersistedState = createPersistedState(\"store\");\n\nexport type StoreProviderProps = {\n  children: ReactElement | ReactElement[];\n};\n\nexport type StoreState = {\n  birthDate?: string;\n};\n\nexport const initialStoreState: StoreState = {};\n\nexport const storeContext =\n  // @ts-ignore\n  createContext<[StoreState, Dispatch<SetStateAction<StoreState>>]>(undefined);\n\nexport function StoreProvider({ children }: StoreProviderProps) {\n  return (\n    <storeContext.Provider value={usePersistedState(initialStoreState)}>\n      {children}\n    </storeContext.Provider>\n  );\n}\n\nexport function useStore() {\n  const [state, setState] = useContext(storeContext);\n  return {\n    setBirthDate: (birthDate?: string) => setState({ birthDate }),\n    state,\n  };\n}\n","import { SubmitHandler, useForm } from \"react-hook-form\";\nimport { useStore } from \"../../hooks/store\";\nimport \"./BirthDateForm.css\";\n\nexport type BirthDateFormInputs = {\n  BirthDate: string;\n};\n\nexport function BirthDateForm() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<BirthDateFormInputs>();\n  const {\n    state: { birthDate },\n    setBirthDate,\n  } = useStore();\n  const onSubmit: SubmitHandler<BirthDateFormInputs> = (data) =>\n    setBirthDate(data.BirthDate);\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input type=\"date\" defaultValue={birthDate} {...register(\"BirthDate\")} />\n      <input type=\"submit\" />\n    </form>\n  );\n}\n","import { times } from \"lodash\";\nimport { calculateAge, getDateOfMultipleDaysLater } from \"../../helpers/datetime-helpers\";\nimport { useStore } from \"../../hooks/store\";\nimport \"./PanicMonster.css\";\n\nexport const YEARS = 90;\n\nexport const YEAR_WEEKS = 52.14;\n\nexport const WEEKS = YEARS * YEAR_WEEKS + 4;\n\nexport function PanicMonster() {\n  const { state } = useStore();\n  const now = new Date();\n  const birthDate = state.birthDate ? new Date(state.birthDate) : undefined;\n  return (\n    <div className=\"PanicMonster\">\n      {times(Math.ceil(WEEKS), (w) => {\n        const date = birthDate\n          ? getDateOfMultipleDaysLater(birthDate, w * 7)\n          : undefined;\n        const classes = [\"PanicMonster-week\"];\n        date && date < now && classes.push('PanicMonster-past-week');\n        const age =\n          birthDate && date ? calculateAge(birthDate, date) : undefined;\n        const title = `#${w + 1}${date ? ` - ${date.toDateString()}\\n${age}` : ''}`;\n        return (\n          <figure\n            key={w}\n            className={classes.join(' ')}\n            title={title}\n            onClick={() => alert(title)}\n          ></figure>\n        );\n      })}\n    </div>\n  );\n}\n","export function getDateOfMultipleDaysLater(date: Date, days: number) {\n  const newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + days);\n  return newDate;\n}\n\nexport function calculateAge(dob: Date, at = new Date()) {\n  //extract the year, month, and date from user date input\n  const dobYear = dob.getFullYear();\n  const dobMonth = dob.getMonth();\n  const dobDate = dob.getDate();\n\n  //extract the year, month, and date from target date\n  const atYear = at.getFullYear();\n  const atMonth = at.getMonth();\n  const atDate = at.getDate();\n\n  //declare a variable to collect the age in year, month, and days\n  let ageString = \"\";\n\n  //get years\n  let yearAge = atYear - dobYear;\n\n  let monthAge: number;\n\n  let dateAge: number;\n\n  //get months\n  if (atMonth >= dobMonth)\n    //get months when target month is greater\n    monthAge = atMonth - dobMonth;\n  else {\n    yearAge--;\n    monthAge = 12 + atMonth - dobMonth;\n  }\n\n  //get days\n  if (atDate >= dobDate)\n    //get days when the target date is greater\n    dateAge = atDate - dobDate;\n  else {\n    monthAge--;\n    dateAge = 31 + atDate - dobDate;\n\n    if (monthAge < 0) {\n      monthAge = 11;\n      yearAge--;\n    }\n  }\n  //group the age in a single variable\n  const age = {\n    years: yearAge,\n    months: monthAge,\n    days: dateAge,\n  };\n\n  if (age.years > 0 && age.months > 0 && age.days > 0)\n    ageString =\n      age.years +\n      \" years, \" +\n      age.months +\n      \" months, and \" +\n      age.days +\n      \" days old.\";\n  else if (age.years === 0 && age.months === 0 && age.days > 0)\n    ageString = \"Only \" + age.days + \" days old!\";\n  //when target month and date is same as birth date and month\n  else if (age.years > 0 && age.months === 0 && age.days === 0)\n    ageString = age.years + \" years old. Happy BirthDate!\";\n  else if (age.years > 0 && age.months > 0 && age.days === 0)\n    ageString = age.years + \" years and \" + age.months + \" months old.\";\n  else if (age.years === 0 && age.months > 0 && age.days > 0)\n    ageString = age.months + \" months and \" + age.days + \" days old.\";\n  else if (age.years > 0 && age.months === 0 && age.days > 0)\n    ageString = age.years + \" years, and\" + age.days + \" days old.\";\n  else if (age.years === 0 && age.months > 0 && age.days === 0)\n    ageString = age.months + \" months old.\";\n  //when target date is same as dob(date of birth)\n  else ageString = \"It's first day on Earth!\";\n\n  return ageString;\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { StoreProvider } from \"../../hooks/store\";\nimport { BirthDateForm } from \"../BirthDateForm/BirthDateForm\";\nimport { PanicMonster } from \"../PanicMonster/PanicMonster\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nexport function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <main>\n        <StoreProvider>\n          <BirthDateForm />\n          <PanicMonster />\n        </StoreProvider>\n      </main>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from \"./components/App/App\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}